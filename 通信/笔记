UDP 协议
  面向无连接的、也就是说在正式传递数据之前不需要先连接起双方
  只是数据报文的搬运工、不保证有序且不丢失的传递到对端
  没有任何控制流量的算法、较于 TCP 更加的轻便
  面向无连接
  不可靠性
  高效
    UDP 的头部开销小只有八字节
  传输方式
    支持一对一、一对多、多对多、多对一的方式

创建 TCP 连接 3 次握手过程
  http 请求与响应传递的都是数据包、它们之间是需要经过一个传输的通道、这个通道就是 tcp 连接
  http1.0
    一个 http 请求创建的时候就去创建一个 tcp 连接、请求发送服务端响后应后这个 tcp 连接就关闭了
  http1.1
    可以通过某种方式保持 tcp 连接不关闭、第二个 http 请求可继续用此 tcp 连接、减少3次握手的开销
  http2
    tcp 连接上的 http 请求是可以并发的、就是同一个用户对同一台服务器发起网页请求时只需要一个 tcp 连接
  1.客户端发起一个要创建连接的数据包请求到服务端、发送 seq = x:number 给服务端
  2.服务端接收到后会开启一个 tcp 连接的端口、返回给客户端一个 ack = x+1、跟服务端的 seq = y
  3.客户端接收到数据知道服务端已允许创建 tcp 连接、发送 ack = y+1 seq = 服务端返回的Ack值 给服务端

为什么 TCP 建立连接需要三次握手，明明两次就可以建立起连接？
  因为这是为了防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误。
  可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求，然后接收数据后释放了连接。
  假设这时候连接请求 A 在两端关闭后终于抵达了服务端，那么此时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。但是客户端其实是 CLOSED 的状态，那么就会导致服务端一直等待，造成资源的浪费。
