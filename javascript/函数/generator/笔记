function * foo(x) {
  let y = 2 * (yield (x + 1))
  let z = yield (y / 3)
  return (x + y + z)
}
let it = foo(5)
it.next()
  {value: 6, done: false}
it.next(12)
  {value: 8, done: false}
it.next(13)
  {value: 42, done: true}

第 1 次 next 时、传参会被忽略、并且函数暂停在 yield (x + 1) 处、所以返回 5 + 1 = 6
第 2 次 next 时、传入的参数等于上一个 yield 的返回值、如传参 yield 永远返回 undefined
  此时 let y = 2 * 12、所以第二个 yield 等于 2 * 12 / 3 = 8
第3次next时、传入的参数会传递给 z、所以 z = 13, x = 5, y = 24、相加等于 42
