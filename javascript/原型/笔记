什么是实例化
	通过 new 关键字创建一个对象的过程

语法糖
	前者都是后者的语法糖、实际开发中不建议写后者
	{} = new Object()
	[] = new Array()    
	function Foo () {} = var Foo = new Function()

隐式修改 constructor
	已改写了 constructor 为 Object
	Foo.prototype = {
		constructor: Foo
	}

案例
	function Foo () {
		getName = function () {console.log(1)}
		return this
	}

	Foo.getName = function () {console.log(2)}
	Foo.prototype.getName = function () {console.log(3)}
	var getName = function () {console.log(4)}
	function getName () {console.log(5)}

	Foo.getName()
	getName()
	Foo().getName()
	getName()
	new Foo.getName()
	new Foo().getName()
	new new Foo().getName()
		-> 2 4 1 1 3 3
案例
	let Fn = function (x = 0, y = 0) {
		this.x = x
		this.y = y
		this.getX = function () {
			console.log(this.x)
		}
	}
	Fn.prototype.getY = function () {
		console.log(this.y)
	}
	Fn.prototype = {
		setX: function (val) {
			this.x = val
		},
		getX: function () {
			console.log(this.x)
		}
	}
	let f1 = new Fn
		-> this.x=0 this.y=0 this.getX = function
	let f2 = new Fn(1, 2)
		-> this.x=1 this.y=2 this.getX = function
	console.log(f1.constructor)
		-> Object
	f1.setX(3)
		-> this.x=3
	f1.getX()
		-> 3
	f1.__proto__.getX()
		-> undefined
	f1.__proto__.setX(4)
		-> f1.prototype.x = 4
	f2.getX()
		-> 1
	f2.__proto__.getX()
		-> 4
	f2.getY()
		-> 报错
案例
	function A () {}
	A.prototype.n = 1
	A.prototype = {
		n: 2,
		m: 3
	}
	var c = new A()
	console.log(b.n, b.m, c.n, c.m)
案例
	Object instanceof Function
		Object.__proto__ === Function.prototype
	Object instanceof Object
		Object.__proto__.__proto__ === Object.prototype
	Function instanceof Function
		Function.__proto__ === Function.prototype
	Function instanceof Object
		Function.__proto__.__proto__ === Object.prototype
	